/* let arr = ['str', 23];
let [v1, v2] = arr; 
console.log( v1.repeat(3) );

// let, const
// 1. let - –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ –±–ª–æ–∫ {...}
let apples = 5;

if (true) {
    let apples = 10;
    console.log(apples); //10
}

console.log( apples );

// 2. let –≤–∏–¥–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
console.log(a); //undefined
var a = 10;

// console.log( b );//error
let b = 20;

let x;
// let x;//error

// 3. –ù–∞ –∫–∞–∂–¥—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é —Å–æ–∑–¥–∞–µ—Ç—Å—è –æ–¥–Ω–∞ —Å–≤–æ—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è

// const
const limons = 5;
// limons = 4; //error

const user = {
    name: 'Roma Zhigan'
};

user.name = 'Ramon';
user.surName = 'Daniluk';
// user = 100; //error



// –î–µ—Å—Ç—Ä—É–∫—Ç–∞—Ä–∏–∑–∞—Ü–∏—è
// –≠—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏—Å–≤–æ–∏—Ç—å –º–∞—Å—Å–∏–≤ –∏–ª–∏ –æ–±—ä–µ–∫—Ç —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–∏–º
// –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º
'use strict';

let [firstName, lastName] = ["–ò–ª—å—è", "–ú–∞–∫–∞—Ä–µ–≤–∏—á"];

console.log( firstName, lastName );

// –º–æ–∂–Ω–æ –æ—Ç–±—Ä–æ—Å–∏—Ç—å –Ω–µ–Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
let [, , title] = "–Æ–ª–∏–π –¶–µ—â–∞—Ä—å –ò–º–ø–µ—Ä–∞—Ç–æ—Ä –†–∏–º–∞".split(' ');
console.log( title );

//spread - –µ—Å–ª–∏ —Ö–æ—Ç–∏–º –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –Ω–æ –Ω–µ —É–≤–µ—Ä–µ–Ω–Ω—ã –≤ –∏—Ö —á–∏—Å–ª–µ
let [firstname, lastname, ...rest] = "–¶–µ–∑–∞—Ä—å –ò–º–ø–µ—Ä–∞—Ç–æ—Ä –†–∏–º–∞ –∏ –µ—â—ë —á–µ–≥–æ —Ç–æ";
// rest is array
console.log( rest );

// –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
function someFunc() {
    return String(Date.now()).substring(0, 3) + '-visitor';
}

let [$1 = 'first', $2 = someFunc()] = [];
console.log( $1, $2 );


// –î–µ—Å—Ç—Ä—É–∫—Ç–∞—Ä–∏–∑–∞—É–∏—è –æ–±—ä–µ–∫—Ç–∞
let option = {
    titl: 'Menu',
    width: 100,
    height: 200
};

let {titl, width = 200, height} = option;
let {titl: t = '_MENU_', width: w, height: h} = option;
let {titl: q, ...size} = option;

console.log( titl, width, height );
console.log( t, w, h );
console.log( size );


// Function
function getWidth() {
    return 200 % 2;
}

function showMenu(title = 'Without header', width = getWidth(), height = 200) {
    console.log(title + ' ' + width + ' ' + height);
}

showMenu('Menu');

function showName(firstName, lastName, ...rest) {
    console.log( firstName + ' ' + lastName + ' ' + rest );
}

showName("–Æ–ª–∏–π", "–¶–µ–∑–∞—Ä—å", "–ò–º–ø–µ—Ä–∞—Ç–æ—Ä", "–†–∏–º–∞");

let nums = [2, 3, 35],
    max = Math.max( ...nums ); //... –ø–µ—Ä–µ–¥–∞–ª–∏ –º–∞—Å—Å–∏–≤

console.log( max );

// –¥–µ—Å—Ç—Ä—É–∫—Ç–∞—Ä–∏–∑–∞—Ü–∏—è –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
let options = {
    title: 'Menu',
    width: 100,
    height: 200
};

function showOptions({title, width, height}) {
    console.log(title, width, height);
}

showOptions(options);
console.log(showOptions.name);


// –§—É–Ω–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ =>
let inc = (x, y) => x + y;
//let inc = function(x) { return x + 1; }; –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ

console.log( inc(3, 7) ); // 4

let getTime = () => {
    let date    = new Date();
    let hours   = date.getHours();
    let minutes = date.getMinutes();
    return hours + ':' + minutes;
};

console.log( getTime() );

// —Ñ—É–Ω–∫—Ü–∏–∏-—Å—Ç—Ä–µ–ª–∫–∏ —É–¥–æ–±–Ω—ã –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–ª–ª–±—ç–∫–æ–≤
let arrr = [5, 8, 3];

let sorted = arrr.sort((a, b) => a - b);
console.log(sorted);

// —Ñ—É–Ω–∫—Ü–∏–∏ —Å—Ç—Ä–µ–ª–∫–∏ –Ω–µ –∏–º–µ—é—Ç —Å–≤–æ–π this, argumrnts
// —É –Ω–∏—Ö —Ç–æ—Ç –∂–µ this –∏ arguments —á—Ç–æ –∏ —Å–Ω–∞—Ä—É–∂–∏
let persons = {
    title: 'Our cours',
    names: ['Vova', 'Egor', 'Denis'],

    showList: function() {
        this.names.forEach(
            (name) => console.log(this.title + ': ' + name)
        );
    }
};

persons.showList();


// –í—ã–∑–æ–≤–æ–º .bind(this) –º—ã –ø–µ—Ä–µ–¥–∞—ë–º —Ç–µ–∫—É—â–∏–π this, –ø—Ä–∏–≤—è–∑—ã–≤–∞—è 
// –µ–≥–æ –∫ —Ñ—É–Ω–∫—Ü–∏–∏.
// –ü—Ä–∏ => –ø—Ä–∏–≤—è–∑–∫–∏ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, —Ç–∞–∫ –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏—è —Å—Ç—Ä–µ–ª–∫–∞ 
// –≤–æ–æ–±—â–µ –Ω–µ –∏–º–µ–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ this. –ü–æ–∏—Å–∫ this –≤ –Ω–µ–π 
// –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —Ç–∞–∫ –∂–µ, –∫–∞–∫ –∏ –ø–æ–∏—Å–∫ –æ–±—ã—á–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, 
// —Ç–æ –µ—Å—Ç—å, –≤—ã—à–µ –≤ –∑–∞–º—ã–∫–∞–Ω–∏–∏. –î–æ –ø–æ—è–≤–ª–µ–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ ES-2015 
// —Ç–∞–∫–æ–µ –±—ã–ª–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.




// –°—Ç—Ä–æ–∫–∏
// ``
// 1. –†–∞—Ä–µ—à–µ–Ω –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫
console.log( `–ú–æ—è 
    –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–∞—è
    —Å—Ç—Ä–æ–∫–∞` );

// 2. –ú–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–ª—è—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏—è
var appls  = 10;
var orangs = 20;

console.log( `${appls} + ${orangs} = ${appls + orangs}` );


// –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞ —Å—Ç—Ä–æ–∫ –≤ JavaScript ‚Äì —ç—Ç–æ UTF-16
// –ü–æ–¥ –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª –æ—Ç–≤–æ–¥–∏—Ç—Å—è 2 –±–∞–π—Ç–∞
console.log( 'Êàë'.length, '©∑∂'.length );
console.log( 
    'ùí≥'.charCodeAt(0) + ' ' + 'ùí≥'.charCodeAt(1)
); // —Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—É—Ä–æ–≥–∞—Ç–Ω—É—é –ø–∞—Ä—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–¥

console.log( 'ùí≥'.codePointAt(0) );
console.log( String.fromCodePoint(119987) ); // ùí≥
console.log( '\u2033' );

// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è - –ø—Ä–∏–≤–∏–¥–µ–Ω–∏–µ –∫ –æ–¥–Ω–æ–º—É –æ–±—â–µ–º—É –≤–∏–¥—É
console.log(
    "S\u0307\u0323".normalize() == 
    "S\u0323\u0307".normalize()
);


// –ü–æ–ª–µ–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã
var str = 'Some text about my ohuenoy life.';
console.log( 'include \'my\': ' + str.includes('my') );
console.log( 'endsWith \'.\': ' + str.endsWith('.') );
console.log( 'startsWith \'Text\': ' + str.startsWith('Text') );
console.log( 'repeat '.repeat(3) );



// –û–±—ä–µ–∫—Ç—ã –∏ –ø—Ä–æ—Ç–æ—Ç–∏–ø—ã
// –ö–æ—Ä–æ—Ç–∫–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ
'use strict';

var name = 'Vasya';
var isAdmin = true;

var User = {
    name,
    isAdmin
};

console.log( JSON.stringify(User) );

// –í—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
var a = "My ",
    d = "green ",
    c = "crocodile"

var User = {
    [(a + d + c).toUpperCase()]: 'Gena'
};

console.log( User["MY GREEN CROCODILE"] );

// Object.assign –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –∫–æ–ø–∏—Ä—É–µ—Ç –≤ –ø–µ—Ä–≤—ã–π
// target —Å–≤–æ–π—Å—Ç–≤–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö

var visitor = { isAdmin: false, visits: true },
    admin   = { isAdmin: true },
    User    = { name: 'Den' };

Object.assign(User, visitor, admin);

console.log( JSON.stringify(User) );

// Object.is( val1, val2 ) –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
console.log( 
    Object.is(+0, -0), // false
    +0 === -0, // true
    Object.is(NaN, NaN), // true
    NaN === NaN // false
); 


// –ú–µ—Ç–æ–¥ –æ–±—ä–µ–∫—Ç–∞
var name = 'Vasya',
    surName = 'Gluschenya'
    User = {
        name,
        // –≤–º–µ—Å—Ç–æ "sayHi: function() {...}" –ø–∏—à–µ–º "sayHi() {...}"
        sayHi() {
            console.log( this.name );
        }
    };

User.sayHi();

var User = {
    name,
    surName,

    get fullName() {
        return `${this.name} ${this.surName}`
    }
};

console.log( User.fullName );


// –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ super
// –¢–æ–ª—å–∫–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –º–µ—Ç–æ–¥–∞—Ö –æ–±—ä–µ–∫—Ç–∞
var animal = {
    walk() {
        console.log( 'I\'m walking' );
    }
};

// super.parentProperty –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑ –º–µ—Ç–æ–¥–∞ –æ–±—ä–µ–∫—Ç–∞ –ø–æ–ª—É—á–∏—Ç—å
// —Å–≤–æ–π—Å—Ç–≤–∞ –µ–≥–æ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞ 
var rabbit = {
    __proto__: animal,
    walk() {
        super.walk();
    }
};

rabbit.walk();

// –°–≤–æ–π—Å—Ç–≤–æ [[HomeObject]] ‚Äì –Ω–µ –∏–∑–º–µ–Ω—è–µ–º–æ–µ. –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ 
// –º–µ—Ç–æ–¥–∞ ‚Äì –æ–Ω –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Å–≤–æ–µ–º—É –æ–±—ä–µ–∫—Ç—É –Ω–∞–≤—Å–µ–≥–¥–∞.

*/








// –ö–ª–∞—Å—Å—ã
/* class User {
    
    constructor(name) {
        this.name = name;
    }

    sayHi() {
        console.log( this.name );
    }

}

let user1 = new User('Kolya');
user1.sayHi();

// –†—è–¥ –æ—Ç–ª–∏—á–∏–π
// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å—Ä–∞–∑—É, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≤ User.prototype
// –û–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–ª–∞—Å—Å–∞ –∫–∞–∫ let
// –Ω–µ–ª—å–∑—è –≤—ã–∑—ã–≤–∞—Ç—å –±–µ–∑ new
// –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞ –Ω–µ–ø–µ—Ä–µ—á–∏—Å–ª–∏–º—ã

// Class Expression 
var Person = class {
    sayHi() { console.log( 'Hello!' ); }
};

new Person().sayHi();

var Person = class USER { // –∏–º—è USER –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–∞
    constructor(name) {
        this.variable = 'asdasd';
    }

    sayHi() {
        let somePerson = new USER();
        console.log( somePerson.variable );
    }
}

new Person().sayHi();


// –ì–µ—Ç—Ç–µ—Ä, —Å–µ—Ç—Ç–µ—Ä, –≤—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
class Usver {
    constructor(firstName, lastName) {
        this.firstName = firstName;
        this.lastName  = lastName;
    }

    //getter
    get fullName() {
        return `${this.firstName} ${this.lastName}`;
    }

    set fullName(newValue) {
        [this.firstName, this.lastName] = newValue.split(' ');
    }

    // –≤—ã—á–∏—Å–ª—è–µ–º–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ
    ["test".toUpperCase()]() {
        console.log( 'passed' );
    }

};

let usver = new Usver('Vasya', 'Pupkin');
console.log( usver.fullName );

usver.fullName = 'Vladimir Kudelko';
console.log(usver.fullName);

usver.TEST();
// –ù–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—Ç—å –≤ –ø—Ä–æ—Ç–æ—Ç–∏–ø–µ –æ–±—ã—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 
// —Ç–∞–∫–æ–µ –∫–∞–∫ User.prototype.key = "value".


// Static property
class SomeClass {
    constructor(firstName, lastName) {
        this.firstName = firstName;
        this.lastName  = lastName;
    }

    static createGuest() {
        return new SomeClass('Guest', 'Site');
    }
};

let someClass = SomeClass.createGuest();
console.log( someClass.firstName ); // Guest


// –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
class Animal {
    constructor(name) {
        this.name = name;
    }

    walk() {
        console.log( 'I walk: ' + this.name );
    }
}

class Rabbit extends Animal {
    // constructor() {
        //super('Krol!'); –ú–æ–∂–Ω–æ —Ç–∞–∫ –≤—ã–∑–≤–∞—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ä–æ–¥–∏—Ç–µ–ª—è
        //console.log(this)
      //  —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ super() –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å this
    //}

    walk() {
        super.walk();
        console.log('... and jump!');
    }
}

new Rabbit('Vasiliy').walk();
// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
// –í—ã–∑–≤–∞—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ä–æ–¥–∏—Ç–µ–ª—è –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –∏–∑–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
 */








// –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö Symbol
/* var sym = Symbol(); // –≠—Ç–æ –ø—Ä–∏–º–∏—Ç–∏–≤
console.log( typeof sym );


// –ø–∞—Ä–∞–º–µ—Ç—Ä —ç—Ç–æ –∏–º—è —Å–∏–º–≤–æ–ª–∞
let name = Symbol.for("name");// –°–æ–∑–¥–∞–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª
// –°–∏–º–≤–æ–ª —É–∂–µ –µ—Å—Ç—å, —á–∏—Ç–∞–µ–º –≤ —Ä–µ–µ—Å—Ç—Ä–µ
console.log( Symbol.for("name") == name ); // true


// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤
// –í –∫–∞—á–µ—Å—Ç–≤–µ –∏–º–µ–Ω —Å–≤–æ–π—Å—Ç–≤
let isAdmin = Symbol("isAdmin");

let user = {
    name: 'Pasha',
    [isAdmin]: true
};

// –í —Ü–∏—Ü–ª–µ for .. in –Ω–µ –±—É–¥–µ—Ç —Å–∏–º–≤–æ–ª–∞ */










// –ò—Ç–µ—Ä–∞—Ç–æ—Ä—ã
// –ò—Ç–µ—Ä–∏—Ä—É–µ–º—ã–µ –∏–ª–∏ '–ø–µ—Ä–µ–±–∏—Ä–∞–µ–º—ã–µ' –æ–±—ä–µ–∫—Ç—ã —ç—Ç–æ —Ç–µ –æ–±—ä–µ–∫—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ
// –º—ã –º–æ–∂–µ–º –ø–µ—Ä–µ–±—Ä–∞—Ç—å –≤ —Ü–∏–∫–ª–µ
/* for (let char of 'Hello') {
    console.log(char);
}

let range = {
    from: 1,
    to: 5
};

range[Symbol.iterator] = function() {
    let current = this.from,
        last    = this.to;

    return {
        next() {
            if (current <= last) {
                return {
                    done: false,
                    value: current++
                }
            } else {
                return {
                    done: true
                }
            }
        }
    };
};

// done ‚Äì —Ä–∞–≤–Ω–æ false –µ—Å–ª–∏ –µ—Å—Ç—å –µ—â—ë –∑–Ω–∞—á–µ–Ω–∏—è, –∏ true ‚Äì –≤ –∫–æ–Ω—Ü–µ.
for (let num of range) {
    console.log(num);
}

// –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∏—Ç–µ—Ä–∞—Ç–æ—Ä—ã
let str = 'Hello',
    iterator = str[Symbol.iterator]();

while(true) {
    let result = iterator.next();

    if (result.done) break;
    console.log(result.value); // –í—ã–≤–µ–¥–µ—Ç –≤—Å–µ –±—É–∫–≤—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏
} */





// Set, Map, WeakSet, WeakMap
// Map - –∫–æ–ª–ª–µ–∫—Ü–∏—è (–∫–ª—é—á: –∑–Ω–∞—á–µ–Ω–∏–µ)
/* let user = { name: 'Vasya' };

let map  = new Map(),
    map2 = new Map([
        [1, 'str2'],
        ['1', 'str3'],
        [user, 123]
    ]);

map.set('1', 'str1') // –∫–ª—é—á-—Å—Ç—Ä–æ–∫–∞
   .set(1, 'num1') // –∫–ª—é—á-—á–∏—Å–ª–æ
   .set(true, 'bool1'); // –∫–ª—é—á-–±—É–ª–µ–≤—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

console.log( 
    map.get(1),
    map.get('1'),
    map.get(true),
    map.size,
    map2.get(user)
);

map.delete('1');
console.log(map.has('1'));
map2.clear()


// Set - –∫–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤ –∑–Ω–∞—á–µ–Ω–∏–π, –ø—Ä–∏—á–µ–º 
// –∫–∞–∂–¥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–æ–∂–µ—Ç –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è 1 —Ä–∞–∑
let set = new Set();

let vasya = {name: 'Vasya'};
let petya = {name: 'Petya'};
let dasha = {name: 'Dasha'};

set.add(vasya);
set.add(petya);
set.add(dasha);
set.add(vasya);
set.add(petya);
// delete, add, has, clear

console.log( 'Size set: ' + set.size ); // 3

set.forEach(
    (val) => console.log(val)
); */


// WeakSet - –û—Å–æ–±—ã–π –≤–∏–¥ Set –Ω–µ –ø—Ä–∏–ø—è—Ç—Å—Ç–≤—É—é—â–∏–π —Å–±–æ—Ä—â–∏–∫—É –º—É—Å–æ—Ä–∞
// —É–¥–∞–ª—è—Ç—å —Å–≤–æ–∏ —ç–ª–µ–º–µ–Ω—Ç—ã. –¢–æ–∂–µ —Å–∞–º–æ–µ –∏ WeakMap
















// Promise - —ç—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ
// —Ç–∞–∫–∂–µ –æ–Ω–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ 
// –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
// pending - –æ–∂–∏–¥–∞–Ω–∏–µ
// fulfilled - –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
// rejected - –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Å –æ—à–∏–±–∫–æ–π
/* var promise = new Promise((resoleve, reject) => {
    // throw new Error('Suka');
    console.log('a');
});

promise.catch(alert); // —á—Ç–æ–±—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –æ—à–∏–±–∫—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫

var prom = new Promise((resolve, reject) => {
    // –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω resolve –∏–ª–∏ reject, —Ç–æ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –±—É–¥–µ—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ
    setTimeout(() => {
        // reject("suka");
        resolve("result");
    }, 1000 );
});


// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –Ω–∞–≤–µ—à–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤:
// promise.then(onFulfilled, onRejected)

prom
    .then(
        result => { // —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏ –≤—ã–∑–æ–≤–µ resolve
            console.log("Fulfilled: " + result);
        },
        error => { // —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏ –≤—ã–∑–æ–≤–µ reject
            console.log("Rejected: " + error);
        }
    );
 */













// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã - –≤–∏–¥ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å 
// —Å–≤–æ—ë –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
// –∏ –¥–∞–ª–µ–µ –≤–æ–∑–æ–±–Ω–∞–≤–ª—è—Ç—å

/* function* generateSequnce() {
    yield 1;
    yield 2;
    return 3;
}
// –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –æ–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
// –æ–±—ä–µ–∫—Ç –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∑—ã–≤–∞—é—Ç "–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º"

let generator = generateSequnce();
// next() - –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ yield
console.log( JSON.stringify(generator.next()) ); // false
console.log( JSON.stringify(generator.next()) ); // false
console.log( JSON.stringify(generator.next()) ); // true

let generator2 = generateSequnce();
// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä - –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π
for (let val of generator2) {
    console.log(val); // return –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è
}


// –ö–æ–º–ø–æ–∑–∏—Ü–∏—è - –∫–æ–≥–¥–∞ –æ–¥–∏–Ω –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –¥—Ä—É–≥–∏–µ
function* generateS(start, end) {
    for (let i = start; i <= end; i++) {
        yield i;
    }
}

let seq = [...generateS(2, 5)]; // –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–ª–∏ –≤ –º–∞—Å—Å–∏–≤
console.log(seq);
 */









// –ú–æ–¥—É–ª–∏. –ú–æ–¥—É–ª—å - —ç—Ç–æ —Ñ–∞–π–ª —Å –∫–æ–¥–æ–º
// –í —ç—Ç–æ–º —Ñ–∞–π–ª–µ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ export –ø–æ–º–µ—á–∞—é—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ 
// —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã —Å–Ω–∞—Ä—É–∂–∏
// –î—Ä—É–≥–∏–µ –º–æ–¥—É–ª–∏ –º–æ–≥—É—Ç –ø–æ–¥–∫–ª—é—á–∞—Ç—å –∏—Ö —á–µ—Ä–µ–∑ import
/* export var one = 1;
let two = 2,
    three = 3;

export {two, three};

// –ü—Ä–∏ –ø–æ–º–æ—â–∏ as –º–æ–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–¥ –∫–∞–∫–∏–º –∏–º–µ–Ω–µ–º –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è
export {two as twice};

export class User {
    constructor(name) {
        this.name = name;
    }
};

export function sayHi() { // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å –∏–º–µ–Ω–µ–º
    console.log("Hello!");
};


// import
import {one, two} from './scripts/module';
console.log( `${one} and ${two}` );
 */

























/* function isPolyndrom(str) {
    let length = str.length;

    if ( length % 2 === 0 || length % 2 === 1 ) {
        String.prototype.every  = [].every;

        return 
            str.every(function(e, index) {
                if ( e ===  str[length - index - 1]) {
                    return true;
                } else {
                    return false;
            }

            if ( index === Math.floor(length / 2) )
                return;
        });
    }

}

console.log( isPolyndrom('b') ); */ 